package ma.oujda.ump.ensao.autogo;

import java.io.*;
import java.net.Socket;

public class Traitement implements Runnable {

	private Socket sock;
	private ObjectInputStream ois = null;
	private ObjectOutputStream oos = null;
	private BufferedReader is;
	private String line;
	private AutoObject autoObjectClient;
	private AutoObject autoObjectServer;
	private TestObject testObjectClient;
	private TestObject testObjectServer;
	static volatile Boolean StopAutoMode = true;
	static volatile Boolean StopManuelMode = true;
	static volatile Boolean StopTestMode = true;
	static String commande = "0";

	public Traitement(Socket pSock) 
	{
		sock = pSock;
	}

	public void run() 
	{

		System.out.println("** Lancement du traitement de la connexion cliente **");

		try {

			while (true) {

				is = new BufferedReader(new InputStreamReader(sock.getInputStream()));

//				Récupérer les données envoyées par le client
				line = is.readLine();

//				Le client souhaite se déconnecter
				if (line != null && line.equals("Disconnect")) {
					break;
				}

//				Le client a choisi le mode Manuel
				if (line != null && line.equals("ManuelMode")) {
					StopManuelMode = false;
					StopAutoMode = true;
					StopTestMode = true;
					System.out.println("-----------Mode manuel : START !");
				}

//				Le client a choisi le mode automatique
				if (line != null && line.equals("AutoMode")) {
					StopAutoMode = false;
					StopManuelMode = true;
					StopTestMode = true;
					System.out.println("-----------Mode automatique : START !");
				}
				
//				Le client a choisi le mode de test
				if (line != null && line.equals("TestMode")) {
					StopTestMode = false;
					StopAutoMode = true;
					StopManuelMode = true;
					System.out.println("-----------Mode de Test : START !");
				}
				
// ********************************** Traitement de la demande en mode Manuel ***************************************
				
				while (StopManuelMode == false) // Tant que le client est dans le mode Manuel							
				{
					line = is.readLine();
					switch (line) 
					{
						case "forward":
							System.out.println("forward");
							commande = "8";
							break;
						case "right":
							System.out.println("right");
							commande = "6";
							break;
						case "left":
							System.out.println("left");
							commande = "4";
							break;
						case "backward":
							System.out.println("backward");
							commande = "2";
							break;
						case "stop":
							System.out.println("stop");
							commande = "5";
							break;
						case "stopManuelMode":
							System.out.println("-----------Mode Manuel : END !");
							StopManuelMode = true;
							break;
					}
				}
				
// ********************************** Traitement de la demande en mode Automatique ***************************************

				while (StopAutoMode == false)  // Tant que le client est dans le mode automatique
				{
					line = is.readLine();

					if (line.equals("sendAutoObject")) // Si le client envoi un objet
					{
						Thread.sleep(500);
						ois = new ObjectInputStream(sock.getInputStream());
						oos = new ObjectOutputStream(sock.getOutputStream());

						// On récupère l'objet envoyé par le client
						autoObjectClient = (AutoObject) ois.readObject();

						// On le clone dans un objet serveur
						autoObjectServer = new AutoObject(autoObjectClient.getRows(), autoObjectClient.getColumns(),autoObjectClient.getD(), autoObjectClient.getF(), autoObjectClient.getBlock());

						// On calcule A*
						AStarExecute AstarExe = new AStarExecute(autoObjectServer.getRows(),autoObjectServer.getColumns(), autoObjectServer.getD(), autoObjectServer.getF(),autoObjectServer.getBlock());

						// On récupère le chemin calculé et on l'ajoute dans l'objet qu'on va envoyer au client
						autoObjectServer.setPath(AstarExe.getPath());

						// On envoie le résultat au client
						oos.writeObject(autoObjectServer);
						oos.flush();

						// On affiche le résultat au niveau du serveur
						System.out.println(autoObjectServer.toString());
					}

					else if (line.equals("stopAutoMode")) {
						System.out.println("-----------AutoMode end !");
						StopAutoMode = true;
						break;
					}
				}

				while (StopTestMode == false) {

					line = is.readLine();

					if (line.equals("sendTestObject")) {
						Thread.sleep(500);
						ois = new ObjectInputStream(sock.getInputStream());
						oos = new ObjectOutputStream(sock.getOutputStream());

						// On attend la demande du client
						testObjectClient = (TestObject) ois.readObject();

						// On traite la demande du client
						testObjectServer = new TestObject(testObjectClient.getPARAM_VITES_PAS(),
								testObjectClient.getPARAM_I_FOR_GO_LEFT(), testObjectClient.getPARAM_DELAY_GO_LEFT(),
								testObjectClient.getPARAM_STOP_GO_LEFT(), testObjectClient.getPARAM_I_FOR_GO_RIGHT(),
								testObjectClient.getPARAM_DELAY_GO_RIGHT(), testObjectClient.getPARAM_STOP_GO_RIGHT(),
								testObjectClient.getPARAM_ANNUL_TEST(), testObjectClient.getPARAM_I_FOR_GO_FORWARD(),
								testObjectClient.getPARAM_CORRECTION(), testObjectClient.getPARAM_VITES_L(),
								testObjectClient.getPARAM_VITES_R());

						// On affiche les données envoyées au niveau du serveur
						System.out.println(testObjectClient.getPARAM_VITES_PAS());
						System.out.println(testObjectClient.getPARAM_I_FOR_GO_LEFT());
						System.out.println(testObjectClient.getPARAM_DELAY_GO_LEFT());
						System.out.println(testObjectClient.getPARAM_STOP_GO_LEFT());
						System.out.println(testObjectClient.getPARAM_I_FOR_GO_RIGHT());
						System.out.println(testObjectClient.getPARAM_DELAY_GO_RIGHT());
						System.out.println(testObjectClient.getPARAM_STOP_GO_RIGHT());
						System.out.println(testObjectClient.getPARAM_ANNUL_TEST());
						System.out.println(testObjectClient.getPARAM_I_FOR_GO_FORWARD());
						System.out.println(testObjectClient.getPARAM_CORRECTION());
						System.out.println(testObjectClient.getPARAM_VITES_L());
						System.out.println(testObjectClient.getPARAM_VITES_R());

					}

					else if (line.equals("stopTestMode")) {
						System.out.println("-----------TestMode end !");
						StopTestMode = true;
						break;
					}
				}

			}
			sock.close();
			System.out.println("Client Déconnecté !");
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
